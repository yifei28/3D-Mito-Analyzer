# Task ID: 10
# Title: Create Segmentation Workflow Wrapper
# Status: pending
# Dependencies: 1
# Priority: medium
# Description: Adapt the existing MoDL segmentation code for the job system with comprehensive CPU-only support
# Details:
Create workflows/segmentation.py adapting MoDL/MoDL_seg/segment_predict.py. Implement SegmentationWorkflow class with: run_segmentation(input_path, output_dir, progress_callback) method; automatic z-stack detection from original code; progress reporting at each slice processing (0-100%); hardware-aware TensorFlow configuration with automatic CPU/GPU detection; CPU-only fallback with optimized batch sizes and memory management; clear user feedback about processing mode; error handling for OOM and invalid files. Output naming convention: {original_name}_segmented.tif. Add metadata JSON alongside output with processing parameters and timing info.

# Test Strategy:
Test with sample raw TIFF files of various sizes, verify progress reporting accuracy, test both CPU and GPU processing modes, test automatic hardware detection, verify CPU-specific batch size optimization, ensure output files are valid and correctly named

# Subtasks:
## 1. Implement Hardware Detection and TensorFlow Configuration [done]
### Dependencies: None
### Description: Create hardware-aware TensorFlow setup with automatic CPU/GPU detection
### Details:
Create workflows/segmentation.py file. Define SegmentationWorkflow class with __init__ method that detects available hardware (GPU/CPU). Implement configure_tensorflow() method that sets up TensorFlow for optimal performance on detected hardware. For GPU: use tf.config.experimental.set_memory_growth() and configure CUDA. For CPU-only: set tf.config.threading options, disable GPU, optimize for CPU with tf.config.optimizer.set_jit(True). Store hardware configuration state and provide user feedback about detected processing mode.

## 2. Adapt Z-Stack Detection and Image Loading [done]
### Dependencies: 10.1
### Description: Port the automatic z-stack detection logic from segment_predict.py
### Details:
Extract and adapt the z-stack detection code from MoDL/MoDL_seg/segment_predict.py. Implement load_and_detect_zstack(input_path) method that reads TIFF files using tifffile, automatically detects z-stack dimensions, handles both 2D and 3D images, and validates image format. Create helper methods for image normalization and preprocessing. Add comprehensive error handling for corrupted or unsupported TIFF formats.

## 3. Implement CPU-Optimized Batch Processing [done]
### Dependencies: 10.1, 10.2
### Description: Create CPU-aware batch size optimization and processing strategy
### Details:
Implement adaptive batch sizing based on hardware type and available memory. For CPU processing: use smaller batch sizes (1-4 slices) to prevent memory overflow, implement memory monitoring with psutil, optimize numpy operations with MKL if available. For GPU: use larger batches (8-16 slices) with GPU memory monitoring. Create get_optimal_batch_size() method that considers available RAM/VRAM, image dimensions, and hardware type. Add dynamic batch size adjustment during processing if memory pressure detected.

## 4. Implement Segmentation Processing with Progress Tracking [done]
### Dependencies: 10.3
### Description: Create the main segmentation method with hardware-aware processing and progress reporting
### Details:
Implement run_segmentation(input_path, output_dir, progress_callback) method. Process images using hardware-optimized batch sizes from subtask 3. Call progress_callback with percentage (0-100) and processing mode info (CPU/GPU) after each batch. Handle both CPU and GPU processing paths with appropriate memory management. Implement proper image reconstruction from processed batches. Add CPU-specific optimizations like multi-threading where beneficial.

## 5. Add Robust Error Handling and Hardware Fallback [done]
### Dependencies: 10.4
### Description: Implement comprehensive error handling with automatic CPU fallback
### Details:
Wrap segmentation logic in try-except blocks for hardware-specific errors. For GPU: catch tf.errors.ResourceExhaustedError (OOM) and automatically fallback to CPU mode with user notification. For CPU: implement memory monitoring and batch size reduction on RAM pressure. Add specific handlers for: invalid TIFF formats, permission errors, disk space issues. Create detailed error messages with actionable suggestions. Implement cleanup of temporary files on failure and automatic retry logic for hardware switching.

## 6. Create Output Management and Hardware-Aware Metadata [done]
### Dependencies: 10.4, 10.5
### Description: Handle output file naming, saving, and comprehensive metadata generation
### Details:
Implement save_results() method following {original_name}_segmented.tif naming convention. Save segmented images using tifffile with proper metadata preservation. Generate accompanying JSON metadata file containing: input file info, processing parameters (model version, hardware used - CPU/GPU, batch size, memory usage), timing information (start time, end time, duration), z-stack dimensions, hardware fallback events, performance metrics (slices/second). Ensure atomic file operations and validate output directory permissions.

