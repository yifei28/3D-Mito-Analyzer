#!/usr/bin/env python3
"""
Core Workflows Playwright Test

Tests the most critical user workflows:
1. Segmentation workflow (file selection ‚Üí job submission ‚Üí completion)
2. Analysis workflow (parameter setup ‚Üí execution ‚Üí results viewing)

Focuses on ensuring users can successfully use these features without bugs.
"""

import asyncio
import time
import tempfile
import os
import sys
from pathlib import Path
import shutil

# Add the project root to the Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

try:
    from playwright.async_api import async_playwright, expect
except ImportError:
    print("‚ùå Playwright not available. Install with: pip install playwright")
    sys.exit(1)


class CoreWorkflowTester:
    """Test class for core segmentation and analysis workflows."""

    def __init__(self):
        self.browser = None
        self.page = None
        self.test_data_dir = None
        self.setup_complete = False

    async def setup(self):
        """Setup test environment and test data."""
        print("üîß Setting up test environment...")

        # Create test data directory with sample files
        self.test_data_dir = tempfile.mkdtemp(prefix="mito_test_")
        raw_dir = os.path.join(self.test_data_dir, "raw")
        os.makedirs(raw_dir, exist_ok=True)

        # Copy a test image if available, otherwise create a dummy one
        test_image_source = "/Users/yifei/mito-analyzer/MoDL/test/test_44/0015.tif"
        test_image_dest = os.path.join(raw_dir, "test_sample.tif")

        if os.path.exists(test_image_source):
            shutil.copy2(test_image_source, test_image_dest)
            print(f"  ‚úì Copied test image: {test_image_dest}")
        else:
            # Create a minimal dummy TIFF file
            import numpy as np
            from PIL import Image
            dummy_image = np.random.randint(0, 255, (64, 64), dtype=np.uint8)
            Image.fromarray(dummy_image).save(test_image_dest)
            print(f"  ‚úì Created dummy test image: {test_image_dest}")

        self.setup_complete = True
        return test_image_dest

    async def cleanup(self):
        """Cleanup test environment."""
        if self.browser:
            await self.browser.close()
        if self.test_data_dir and os.path.exists(self.test_data_dir):
            shutil.rmtree(self.test_data_dir)
            print(f"  ‚úì Cleaned up test directory: {self.test_data_dir}")

    async def init_browser(self, headless=False):
        """Initialize browser and navigate to app."""
        playwright = await async_playwright().__aenter__()
        self.browser = await playwright.chromium.launch(headless=headless)
        self.page = await self.browser.new_page()

        # Set larger viewport for better interaction
        await self.page.set_viewport_size({"width": 1400, "height": 900})

        # Navigate to Streamlit app
        await self.page.goto("http://localhost:8501", timeout=30000)

        # Wait for app to fully load
        await self.page.wait_for_selector("h1", timeout=10000)
        print("  ‚úì Browser initialized and app loaded")

    async def test_app_initialization(self):
        """Test that the app loads correctly with all major elements."""
        print("\nüß™ Testing App Initialization...")

        # Check main header
        header = await self.page.locator("h1").first.text_content()
        assert "Mitochondria Analyzer" in header, f"Header not found: {header}"
        print("  ‚úì Main header displayed correctly")

        # Check that all 4 tabs are present
        tabs = await self.page.locator('[data-testid="stTabs"] button').all()
        tab_texts = [await tab.text_content() for tab in tabs]
        expected_tabs = ["üî¨ Segmentation", "üìä Analysis", "üìÅ File Manager", "üöÄ Job Queue"]

        for expected_tab in expected_tabs:
            assert any(expected_tab in tab_text for tab_text in tab_texts), f"Missing tab: {expected_tab}"
        print(f"  ‚úì All 4 tabs present: {tab_texts}")

        # Check sidebar parameters
        sidebar_inputs = await self.page.locator('[data-testid="stSidebar"] input[type="number"]').all()
        assert len(sidebar_inputs) >= 3, f"Expected 3+ resolution inputs, found {len(sidebar_inputs)}"
        print("  ‚úì Sidebar resolution parameters present")

        return True

    async def test_segmentation_workflow(self):
        """Test the complete segmentation workflow."""
        print("\nüî¨ Testing Segmentation Workflow...")

        # Click on Segmentation tab
        await self.page.locator('button:has-text("üî¨ Segmentation")').click()
        await self.page.wait_for_timeout(2000)
        print("  ‚úì Segmentation tab activated")

        # Look for file browser or file selection area
        # This might be a file input, button, or directory listing

        # Try to find file selection elements (this will depend on the actual UI)
        # Let's look for common patterns
        file_elements = await self.page.locator('input[type="file"], button:has-text("Browse"), button:has-text("Select")').all()

        if not file_elements:
            # Check if there's a directory listing or file browser
            file_browser = await self.page.locator('div:has-text("data"), div:has-text("raw"), div:has-text(".tif")').first.is_visible()
            if file_browser:
                print("  ‚úì File browser interface detected")
            else:
                print("  ‚ö†Ô∏è File selection interface not clearly visible, checking for other patterns...")

                # Print current page content for debugging
                content = await self.page.content()
                if "segmentation" in content.lower():
                    print("  ‚úì Segmentation content loaded")
                else:
                    print("  ‚ùå Segmentation content not loaded properly")
                    return False
        else:
            print(f"  ‚úì File input elements found: {len(file_elements)}")

        # Look for parameter inputs specific to segmentation
        try:
            gpu_toggle = await self.page.locator('input[type="checkbox"]').first.is_visible()
            if gpu_toggle:
                print("  ‚úì GPU toggle found")
        except:
            print("  ‚ö†Ô∏è GPU toggle check failed")

        # Look for submit/start button
        submit_buttons = await self.page.locator('button').filter(has_text="Start").all()
        if not submit_buttons:
            submit_buttons = await self.page.locator('button').filter(has_text="Submit").all()
        if not submit_buttons:
            submit_buttons = await self.page.locator('button').filter(has_text="Process").all()
        if submit_buttons:
            print(f"  ‚úì Submit buttons found: {len(submit_buttons)}")

            # Try to interact with the first submit button (but don't actually submit)
            first_button = submit_buttons[0]
            is_enabled = await first_button.is_enabled()
            print(f"  ‚úì Submit button enabled: {is_enabled}")
        else:
            print("  ‚ö†Ô∏è No obvious submit buttons found")

        return True

    async def test_analysis_workflow(self):
        """Test the complete analysis workflow."""
        print("\nüìä Testing Analysis Workflow...")

        # Click on Analysis tab
        await self.page.locator('button:has-text("üìä Analysis")').click()
        await self.page.wait_for_timeout(2000)
        print("  ‚úì Analysis tab activated")

        # Look for parameter preset buttons
        preset_buttons = []
        confocal_btn = await self.page.locator('button').filter(has_text="Confocal").all()
        super_res_btn = await self.page.locator('button').filter(has_text="Super Resolution").all()
        wide_field_btn = await self.page.locator('button').filter(has_text="Wide-field").all()
        preset_buttons = confocal_btn + super_res_btn + wide_field_btn

        if preset_buttons:
            print(f"  ‚úì Parameter preset buttons found: {len(preset_buttons)}")

            # Try clicking a preset
            if len(preset_buttons) > 0:
                await preset_buttons[0].click()
                await self.page.wait_for_timeout(1000)
                print("  ‚úì Preset button clickable")
        else:
            print("  ‚ö†Ô∏è Parameter preset buttons not found")

        # Look for resolution parameter inputs
        resolution_inputs = await self.page.locator('input[type="number"]').all()
        if resolution_inputs:
            print(f"  ‚úì Resolution parameter inputs found: {len(resolution_inputs)}")

        # Look for analysis controls
        analyze_buttons = await self.page.locator('button').filter(has_text="Analyze").all()
        start_analysis_buttons = await self.page.locator('button').filter(has_text="Start Analysis").all()
        process_buttons = await self.page.locator('button').filter(has_text="Process").all()
        analysis_buttons = analyze_buttons + start_analysis_buttons + process_buttons

        if analysis_buttons:
            print(f"  ‚úì Analysis buttons found: {len(analysis_buttons)}")

            # Check if buttons are enabled
            for i, button in enumerate(analysis_buttons):
                is_enabled = await button.is_enabled()
                button_text = await button.text_content()
                print(f"    Button {i+1} ('{button_text}'): enabled = {is_enabled}")

        # Look for cache-related controls
        cache_elements = await self.page.locator('input[type="checkbox"]').all()
        if cache_elements:
            print(f"  ‚úì Cache control elements found: {len(cache_elements)}")

        return True

    async def test_job_queue_functionality(self):
        """Test job queue monitoring functionality."""
        print("\nüöÄ Testing Job Queue Functionality...")

        # Click on Job Queue tab
        await self.page.locator('button:has-text("üöÄ Job Queue")').click()
        await self.page.wait_for_timeout(2000)
        print("  ‚úì Job Queue tab activated")

        # Look for job queue metrics
        metrics_text = await self.page.get_by_text("Total Jobs").or_(self.page.get_by_text("Active Workers")).or_(self.page.get_by_text("Queue Size")).first.is_visible()
        if metrics_text:
            print("  ‚úì Job queue metrics visible")

        # Look for auto-refresh controls
        refresh_controls = []
        auto_checkboxes = await self.page.locator('input[type="checkbox"]').all()
        refresh_buttons = await self.page.locator('button').filter(has_text="Refresh").all()
        refresh_controls = auto_checkboxes + refresh_buttons
        if refresh_controls:
            print(f"  ‚úì Refresh controls found: {len(refresh_controls)}")

        # Look for GPU status
        gpu_status = await self.page.get_by_text("GPU").or_(self.page.get_by_text("Hardware")).first.is_visible()
        if gpu_status:
            print("  ‚úì GPU status information visible")

        # Look for job control buttons
        cancel_buttons = await self.page.locator('button').filter(has_text="Cancel").all()
        retry_buttons = await self.page.locator('button').filter(has_text="Retry").all()
        details_buttons = await self.page.locator('button').filter(has_text="Details").all()
        job_controls = cancel_buttons + retry_buttons + details_buttons
        if job_controls:
            print(f"  ‚úì Job control buttons found: {len(job_controls)}")

        return True

    async def test_file_manager_functionality(self):
        """Test file manager functionality."""
        print("\nüìÅ Testing File Manager Functionality...")

        # Click on File Manager tab
        await self.page.locator('button:has-text("üìÅ File Manager")').click()
        await self.page.wait_for_timeout(2000)
        print("  ‚úì File Manager tab activated")

        # Look for directory navigation
        data_text = await self.page.get_by_text("data").all()
        raw_text = await self.page.get_by_text("raw").all()
        results_text = await self.page.get_by_text("results").all()
        directory_elements = data_text + raw_text + results_text
        if directory_elements:
            print(f"  ‚úì Directory elements found: {len(directory_elements)}")

        # Look for file operations
        browse_buttons = await self.page.locator('button').filter(has_text="Browse").all()
        select_buttons = await self.page.locator('button').filter(has_text="Select").all()
        cleanup_buttons = await self.page.locator('button').filter(has_text="Cleanup").all()
        file_operations = browse_buttons + select_buttons + cleanup_buttons
        if file_operations:
            print(f"  ‚úì File operation buttons found: {len(file_operations)}")

        return True

    async def test_error_handling(self):
        """Test basic error handling scenarios."""
        print("\n‚ö†Ô∏è Testing Error Handling...")

        # Test invalid parameter values in sidebar
        resolution_inputs = await self.page.locator('[data-testid="stSidebar"] input[type="number"]').all()

        if resolution_inputs:
            # Try setting an invalid value
            first_input = resolution_inputs[0]
            await first_input.fill("-1")
            await self.page.wait_for_timeout(1000)

            # Check if there's any error indication
            error_text = await self.page.get_by_text("error").all()
            invalid_text = await self.page.get_by_text("invalid").all()
            alert_elements = await self.page.locator('.stAlert').all()
            error_elements = error_text + invalid_text + alert_elements
            if error_elements:
                print("  ‚úì Error handling detected for invalid input")
            else:
                print("  ‚ö†Ô∏è No obvious error handling for invalid input")

            # Reset to valid value
            await first_input.fill("0.0425")

        return True


async def run_core_workflow_tests():
    """Run all core workflow tests."""
    print("üöÄ CORE WORKFLOWS PLAYWRIGHT TEST")
    print("=" * 60)
    print("Testing critical segmentation and analysis workflows")
    print()

    tester = CoreWorkflowTester()
    test_results = {}

    try:
        # Setup test environment
        await tester.setup()
        await tester.init_browser(headless=False)  # Set to True for headless mode

        # Run all tests
        tests = [
            ("App Initialization", tester.test_app_initialization),
            ("Segmentation Workflow", tester.test_segmentation_workflow),
            ("Analysis Workflow", tester.test_analysis_workflow),
            ("Job Queue Functionality", tester.test_job_queue_functionality),
            ("File Manager Functionality", tester.test_file_manager_functionality),
            ("Error Handling", tester.test_error_handling),
        ]

        for test_name, test_func in tests:
            try:
                result = await test_func()
                test_results[test_name] = result
                status = "‚úÖ PASSED" if result else "‚ùå FAILED"
                print(f"{status}: {test_name}")
            except Exception as e:
                test_results[test_name] = False
                print(f"‚ùå FAILED: {test_name} - {e}")
                import traceback
                traceback.print_exc()

        # Wait a bit to see final state
        await tester.page.wait_for_timeout(3000)

    except Exception as e:
        print(f"‚ùå Test setup failed: {e}")
        import traceback
        traceback.print_exc()
        return False

    finally:
        await tester.cleanup()

    # Print results summary
    print("\n" + "=" * 60)
    print("üéØ CORE WORKFLOW TEST RESULTS")
    print("=" * 60)

    passed = sum(1 for result in test_results.values() if result)
    total = len(test_results)

    for test_name, result in test_results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {test_name}")

    print(f"\nOverall: {passed}/{total} tests passed")

    if passed == total:
        print("üéâ SUCCESS: All core workflows are functional!")
        print("‚úÖ Users can successfully use segmentation and analysis features")
        print("‚úÖ No critical bugs detected in main user workflows")
    else:
        print("‚ö†Ô∏è Some core workflow issues detected")
        print("‚ùå Critical bugs may prevent users from using key features")

    return passed == total


async def main():
    """Main test runner."""
    success = await run_core_workflow_tests()
    return success


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)